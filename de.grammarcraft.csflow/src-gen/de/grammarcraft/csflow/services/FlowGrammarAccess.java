/*
* generated by Xtext
*/

package de.grammarcraft.csflow.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FlowGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cFunctionUnitsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionUnitsFunctionUnitParserRuleCall_2_0 = (RuleCall)cFunctionUnitsAssignment_2.eContents().get(0);
		
		//Model:
		//	("package" name=QualifiedName)? imports+=Import* functionUnits+=FunctionUnit*;
		public ParserRule getRule() { return rule; }

		//("package" name=QualifiedName)? imports+=Import* functionUnits+=FunctionUnit*
		public Group getGroup() { return cGroup; }

		//("package" name=QualifiedName)?
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }

		//functionUnits+=FunctionUnit*
		public Assignment getFunctionUnitsAssignment_2() { return cFunctionUnitsAssignment_2; }

		//FunctionUnit
		public RuleCall getFunctionUnitsFunctionUnitParserRuleCall_2_0() { return cFunctionUnitsFunctionUnitParserRuleCall_2_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class FunctionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFlowParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionUnit:
		//	Flow | Operation;
		public ParserRule getRule() { return rule; }

		//Flow | Operation
		public Alternatives getAlternatives() { return cAlternatives; }

		//Flow
		public RuleCall getFlowParserRuleCall_0() { return cFlowParserRuleCall_0; }

		//Operation
		public RuleCall getOperationParserRuleCall_1() { return cOperationParserRuleCall_1; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedName
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedName
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedName
		public RuleCall getImportedNamespaceQualifiedNameParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameParserRuleCall_1_0; }
	}

	public class FlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Flow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStreamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStreamsStreamParserRuleCall_2_0 = (RuleCall)cStreamsAssignment_2.eContents().get(0);
		
		//Flow:
		//	"flow" name=ID streams+=Stream*;
		public ParserRule getRule() { return rule; }

		//"flow" name=ID streams+=Stream*
		public Group getGroup() { return cGroup; }

		//"flow"
		public Keyword getFlowKeyword_0() { return cFlowKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//streams+=Stream*
		public Assignment getStreamsAssignment_2() { return cStreamsAssignment_2; }

		//Stream
		public RuleCall getStreamsStreamParserRuleCall_2_0() { return cStreamsStreamParserRuleCall_2_0; }
	}

	public class StreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Stream");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftPortAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftPortLeftPortParserRuleCall_0_0 = (RuleCall)cLeftPortAssignment_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMessageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMessageQualifiedNameParserRuleCall_2_0 = (RuleCall)cMessageAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightPortAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightPortRightPortParserRuleCall_4_0 = (RuleCall)cRightPortAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Stream:
		//	leftPort=LeftPort ">" message=QualifiedName ">" rightPort=RightPort ";";
		public ParserRule getRule() { return rule; }

		//leftPort=LeftPort ">" message=QualifiedName ">" rightPort=RightPort ";"
		public Group getGroup() { return cGroup; }

		//leftPort=LeftPort
		public Assignment getLeftPortAssignment_0() { return cLeftPortAssignment_0; }

		//LeftPort
		public RuleCall getLeftPortLeftPortParserRuleCall_0_0() { return cLeftPortLeftPortParserRuleCall_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//message=QualifiedName
		public Assignment getMessageAssignment_2() { return cMessageAssignment_2; }

		//QualifiedName
		public RuleCall getMessageQualifiedNameParserRuleCall_2_0() { return cMessageQualifiedNameParserRuleCall_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }

		//rightPort=RightPort
		public Assignment getRightPortAssignment_4() { return cRightPortAssignment_4; }

		//RightPort
		public RuleCall getRightPortRightPortParserRuleCall_4_0() { return cRightPortRightPortParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class LeftPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LeftPort");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGlobalInputPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnnamedSubFlowPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPortParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LeftPort:
		//	GlobalInputPort | UnnamedSubFlowPort | Port;
		public ParserRule getRule() { return rule; }

		//GlobalInputPort | UnnamedSubFlowPort | Port
		public Alternatives getAlternatives() { return cAlternatives; }

		//GlobalInputPort
		public RuleCall getGlobalInputPortParserRuleCall_0() { return cGlobalInputPortParserRuleCall_0; }

		//UnnamedSubFlowPort
		public RuleCall getUnnamedSubFlowPortParserRuleCall_1() { return cUnnamedSubFlowPortParserRuleCall_1; }

		//Port
		public RuleCall getPortParserRuleCall_2() { return cPortParserRuleCall_2; }
	}

	public class GlobalInputPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalInputPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cGlobalInputPortAction_2 = (Action)cGroup.eContents().get(2);
		
		//GlobalInputPort:
		//	"." "in" {GlobalInputPort};
		public ParserRule getRule() { return rule; }

		//"." "in" {GlobalInputPort}
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//{GlobalInputPort}
		public Action getGlobalInputPortAction_2() { return cGlobalInputPortAction_2; }
	}

	public class UnnamedSubFlowPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedSubFlowPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cUnnamedSubFlowPortAction_1 = (Action)cGroup.eContents().get(1);
		
		//UnnamedSubFlowPort:
		//	"." {UnnamedSubFlowPort};
		public ParserRule getRule() { return rule; }

		//"." {UnnamedSubFlowPort}
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//{UnnamedSubFlowPort}
		public Action getUnnamedSubFlowPortAction_1() { return cUnnamedSubFlowPortAction_1; }
	}

	public class RightPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RightPort");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGlobalOutputPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnnamedSubFlowPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPortParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RightPort:
		//	GlobalOutputPort | UnnamedSubFlowPort | Port;
		public ParserRule getRule() { return rule; }

		//GlobalOutputPort | UnnamedSubFlowPort | Port
		public Alternatives getAlternatives() { return cAlternatives; }

		//GlobalOutputPort
		public RuleCall getGlobalOutputPortParserRuleCall_0() { return cGlobalOutputPortParserRuleCall_0; }

		//UnnamedSubFlowPort
		public RuleCall getUnnamedSubFlowPortParserRuleCall_1() { return cUnnamedSubFlowPortParserRuleCall_1; }

		//Port
		public RuleCall getPortParserRuleCall_2() { return cPortParserRuleCall_2; }
	}

	public class GlobalOutputPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalOutputPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOutKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cGlobalOutputPortAction_2 = (Action)cGroup.eContents().get(2);
		
		//GlobalOutputPort:
		//	"." "out" {GlobalOutputPort};
		public ParserRule getRule() { return rule; }

		//"." "out" {GlobalOutputPort}
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//"out"
		public Keyword getOutKeyword_1() { return cOutKeyword_1; }

		//{GlobalOutputPort}
		public Action getGlobalOutputPortAction_2() { return cGlobalOutputPortAction_2; }
	}

	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionUnitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionUnitFunctionUnitCrossReference_0_0 = (CrossReference)cFunctionUnitAssignment_0.eContents().get(0);
		private final RuleCall cFunctionUnitFunctionUnitIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionUnitFunctionUnitCrossReference_0_0.eContents().get(1);
		private final Assignment cPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPortNamedPortParserRuleCall_1_0 = (RuleCall)cPortAssignment_1.eContents().get(0);
		
		//Port:
		//	functionUnit=[FunctionUnit] port=NamedPort?;
		public ParserRule getRule() { return rule; }

		//functionUnit=[FunctionUnit] port=NamedPort?
		public Group getGroup() { return cGroup; }

		//functionUnit=[FunctionUnit]
		public Assignment getFunctionUnitAssignment_0() { return cFunctionUnitAssignment_0; }

		//[FunctionUnit]
		public CrossReference getFunctionUnitFunctionUnitCrossReference_0_0() { return cFunctionUnitFunctionUnitCrossReference_0_0; }

		//ID
		public RuleCall getFunctionUnitFunctionUnitIDTerminalRuleCall_0_0_1() { return cFunctionUnitFunctionUnitIDTerminalRuleCall_0_0_1; }

		//port=NamedPort?
		public Assignment getPortAssignment_1() { return cPortAssignment_1; }

		//NamedPort
		public RuleCall getPortNamedPortParserRuleCall_1_0() { return cPortNamedPortParserRuleCall_1_0; }
	}

	public class NamedPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NamedPort:
		//	"." name=ID;
		public ParserRule getRule() { return rule; }

		//"." name=ID
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEbcOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Operation:
		//	EbcOperation | MethodOperation;
		public ParserRule getRule() { return rule; }

		//EbcOperation | MethodOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//EbcOperation
		public RuleCall getEbcOperationParserRuleCall_0() { return cEbcOperationParserRuleCall_0; }

		//MethodOperation
		public RuleCall getMethodOperationParserRuleCall_1() { return cMethodOperationParserRuleCall_1; }
	}

	public class EbcOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EbcOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEbcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassNativeClassParserRuleCall_3_0 = (RuleCall)cClassAssignment_3.eContents().get(0);
		
		//EbcOperation:
		//	"ebc" name=ID "=" class=NativeClass;
		public ParserRule getRule() { return rule; }

		//"ebc" name=ID "=" class=NativeClass
		public Group getGroup() { return cGroup; }

		//"ebc"
		public Keyword getEbcKeyword_0() { return cEbcKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//class=NativeClass
		public Assignment getClassAssignment_3() { return cClassAssignment_3; }

		//NativeClass
		public RuleCall getClassNativeClassParserRuleCall_3_0() { return cClassNativeClassParserRuleCall_3_0; }
	}

	public class NativeClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NativeClass");
		private final Assignment cReferenceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cReferenceQualifiedNameParserRuleCall_0 = (RuleCall)cReferenceAssignment.eContents().get(0);
		
		//NativeClass:
		//	reference=QualifiedName;
		public ParserRule getRule() { return rule; }

		//reference=QualifiedName
		public Assignment getReferenceAssignment() { return cReferenceAssignment; }

		//QualifiedName
		public RuleCall getReferenceQualifiedNameParserRuleCall_0() { return cReferenceQualifiedNameParserRuleCall_0; }
	}

	public class MethodOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassNativeClassParserRuleCall_3_0 = (RuleCall)cClassAssignment_3.eContents().get(0);
		private final Keyword cNumberSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMethodAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMethodNativeMethodParserRuleCall_5_0 = (RuleCall)cMethodAssignment_5.eContents().get(0);
		
		//MethodOperation:
		//	"method" name=ID "=" class=NativeClass "#" method=NativeMethod;
		public ParserRule getRule() { return rule; }

		//"method" name=ID "=" class=NativeClass "#" method=NativeMethod
		public Group getGroup() { return cGroup; }

		//"method"
		public Keyword getMethodKeyword_0() { return cMethodKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//class=NativeClass
		public Assignment getClassAssignment_3() { return cClassAssignment_3; }

		//NativeClass
		public RuleCall getClassNativeClassParserRuleCall_3_0() { return cClassNativeClassParserRuleCall_3_0; }

		//"#"
		public Keyword getNumberSignKeyword_4() { return cNumberSignKeyword_4; }

		//method=NativeMethod
		public Assignment getMethodAssignment_5() { return cMethodAssignment_5; }

		//NativeMethod
		public RuleCall getMethodNativeMethodParserRuleCall_5_0() { return cMethodNativeMethodParserRuleCall_5_0; }
	}

	public class NativeMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NativeMethod");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//NativeMethod:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private ModelElements pModel;
	private QualifiedNameElements pQualifiedName;
	private FunctionUnitElements pFunctionUnit;
	private ImportElements pImport;
	private FlowElements pFlow;
	private StreamElements pStream;
	private LeftPortElements pLeftPort;
	private GlobalInputPortElements pGlobalInputPort;
	private UnnamedSubFlowPortElements pUnnamedSubFlowPort;
	private RightPortElements pRightPort;
	private GlobalOutputPortElements pGlobalOutputPort;
	private PortElements pPort;
	private NamedPortElements pNamedPort;
	private OperationElements pOperation;
	private EbcOperationElements pEbcOperation;
	private NativeClassElements pNativeClass;
	private MethodOperationElements pMethodOperation;
	private NativeMethodElements pNativeMethod;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FlowGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	("package" name=QualifiedName)? imports+=Import* functionUnits+=FunctionUnit*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//FunctionUnit:
	//	Flow | Operation;
	public FunctionUnitElements getFunctionUnitAccess() {
		return (pFunctionUnit != null) ? pFunctionUnit : (pFunctionUnit = new FunctionUnitElements());
	}
	
	public ParserRule getFunctionUnitRule() {
		return getFunctionUnitAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedName;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Flow:
	//	"flow" name=ID streams+=Stream*;
	public FlowElements getFlowAccess() {
		return (pFlow != null) ? pFlow : (pFlow = new FlowElements());
	}
	
	public ParserRule getFlowRule() {
		return getFlowAccess().getRule();
	}

	//Stream:
	//	leftPort=LeftPort ">" message=QualifiedName ">" rightPort=RightPort ";";
	public StreamElements getStreamAccess() {
		return (pStream != null) ? pStream : (pStream = new StreamElements());
	}
	
	public ParserRule getStreamRule() {
		return getStreamAccess().getRule();
	}

	//LeftPort:
	//	GlobalInputPort | UnnamedSubFlowPort | Port;
	public LeftPortElements getLeftPortAccess() {
		return (pLeftPort != null) ? pLeftPort : (pLeftPort = new LeftPortElements());
	}
	
	public ParserRule getLeftPortRule() {
		return getLeftPortAccess().getRule();
	}

	//GlobalInputPort:
	//	"." "in" {GlobalInputPort};
	public GlobalInputPortElements getGlobalInputPortAccess() {
		return (pGlobalInputPort != null) ? pGlobalInputPort : (pGlobalInputPort = new GlobalInputPortElements());
	}
	
	public ParserRule getGlobalInputPortRule() {
		return getGlobalInputPortAccess().getRule();
	}

	//UnnamedSubFlowPort:
	//	"." {UnnamedSubFlowPort};
	public UnnamedSubFlowPortElements getUnnamedSubFlowPortAccess() {
		return (pUnnamedSubFlowPort != null) ? pUnnamedSubFlowPort : (pUnnamedSubFlowPort = new UnnamedSubFlowPortElements());
	}
	
	public ParserRule getUnnamedSubFlowPortRule() {
		return getUnnamedSubFlowPortAccess().getRule();
	}

	//RightPort:
	//	GlobalOutputPort | UnnamedSubFlowPort | Port;
	public RightPortElements getRightPortAccess() {
		return (pRightPort != null) ? pRightPort : (pRightPort = new RightPortElements());
	}
	
	public ParserRule getRightPortRule() {
		return getRightPortAccess().getRule();
	}

	//GlobalOutputPort:
	//	"." "out" {GlobalOutputPort};
	public GlobalOutputPortElements getGlobalOutputPortAccess() {
		return (pGlobalOutputPort != null) ? pGlobalOutputPort : (pGlobalOutputPort = new GlobalOutputPortElements());
	}
	
	public ParserRule getGlobalOutputPortRule() {
		return getGlobalOutputPortAccess().getRule();
	}

	//Port:
	//	functionUnit=[FunctionUnit] port=NamedPort?;
	public PortElements getPortAccess() {
		return (pPort != null) ? pPort : (pPort = new PortElements());
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}

	//NamedPort:
	//	"." name=ID;
	public NamedPortElements getNamedPortAccess() {
		return (pNamedPort != null) ? pNamedPort : (pNamedPort = new NamedPortElements());
	}
	
	public ParserRule getNamedPortRule() {
		return getNamedPortAccess().getRule();
	}

	//Operation:
	//	EbcOperation | MethodOperation;
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//EbcOperation:
	//	"ebc" name=ID "=" class=NativeClass;
	public EbcOperationElements getEbcOperationAccess() {
		return (pEbcOperation != null) ? pEbcOperation : (pEbcOperation = new EbcOperationElements());
	}
	
	public ParserRule getEbcOperationRule() {
		return getEbcOperationAccess().getRule();
	}

	//NativeClass:
	//	reference=QualifiedName;
	public NativeClassElements getNativeClassAccess() {
		return (pNativeClass != null) ? pNativeClass : (pNativeClass = new NativeClassElements());
	}
	
	public ParserRule getNativeClassRule() {
		return getNativeClassAccess().getRule();
	}

	//MethodOperation:
	//	"method" name=ID "=" class=NativeClass "#" method=NativeMethod;
	public MethodOperationElements getMethodOperationAccess() {
		return (pMethodOperation != null) ? pMethodOperation : (pMethodOperation = new MethodOperationElements());
	}
	
	public ParserRule getMethodOperationRule() {
		return getMethodOperationAccess().getRule();
	}

	//NativeMethod:
	//	name=ID;
	public NativeMethodElements getNativeMethodAccess() {
		return (pNativeMethod != null) ? pNativeMethod : (pNativeMethod = new NativeMethodElements());
	}
	
	public ParserRule getNativeMethodRule() {
		return getNativeMethodAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
