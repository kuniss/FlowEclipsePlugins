/*
* generated by Xtext
*/
package de.grammarcraft.csflow.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.grammarcraft.csflow.services.FlowGrammarAccess;

public class FlowParser extends AbstractContentAssistParser {
	
	@Inject
	private FlowGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.grammarcraft.csflow.ui.contentassist.antlr.internal.InternalFlowParser createParser() {
		de.grammarcraft.csflow.ui.contentassist.antlr.internal.InternalFlowParser result = new de.grammarcraft.csflow.ui.contentassist.antlr.internal.InternalFlowParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFunctionUnitAccess().getAlternatives(), "rule__FunctionUnit__Alternatives");
					put(grammarAccess.getLeftPortAccess().getAlternatives(), "rule__LeftPort__Alternatives");
					put(grammarAccess.getRightPortAccess().getAlternatives(), "rule__RightPort__Alternatives");
					put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
					put(grammarAccess.getOperationTypeAccess().getNameAlternatives_0(), "rule__OperationType__NameAlternatives_0");
					put(grammarAccess.getTypeParameterAccess().getAlternatives(), "rule__TypeParameter__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_0(), "rule__Model__Group_0__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getFlowAccess().getGroup(), "rule__Flow__Group__0");
					put(grammarAccess.getStreamAccess().getGroup(), "rule__Stream__Group__0");
					put(grammarAccess.getGlobalInputPortAccess().getGroup(), "rule__GlobalInputPort__Group__0");
					put(grammarAccess.getUnnamedSubFlowPortAccess().getGroup(), "rule__UnnamedSubFlowPort__Group__0");
					put(grammarAccess.getGlobalOutputPortAccess().getGroup(), "rule__GlobalOutputPort__Group__0");
					put(grammarAccess.getPortAccess().getGroup(), "rule__Port__Group__0");
					put(grammarAccess.getNamedPortAccess().getGroup(), "rule__NamedPort__Group__0");
					put(grammarAccess.getEbcOperationAccess().getGroup(), "rule__EbcOperation__Group__0");
					put(grammarAccess.getMethodOperationAccess().getGroup(), "rule__MethodOperation__Group__0");
					put(grammarAccess.getSignatureAccess().getGroup(), "rule__Signature__Group__0");
					put(grammarAccess.getGenericTypeAccess().getGroup(), "rule__GenericType__Group__0");
					put(grammarAccess.getOperationTypeParametersAccess().getGroup(), "rule__OperationTypeParameters__Group__0");
					put(grammarAccess.getCSTypeParameterAccess().getGroup(), "rule__CSTypeParameter__Group__0");
					put(grammarAccess.getModelAccess().getNameAssignment_0_1(), "rule__Model__NameAssignment_0_1");
					put(grammarAccess.getModelAccess().getImportsAssignment_1(), "rule__Model__ImportsAssignment_1");
					put(grammarAccess.getModelAccess().getFunctionUnitsAssignment_2(), "rule__Model__FunctionUnitsAssignment_2");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getFlowAccess().getNameAssignment_1(), "rule__Flow__NameAssignment_1");
					put(grammarAccess.getFlowAccess().getStreamsAssignment_2(), "rule__Flow__StreamsAssignment_2");
					put(grammarAccess.getStreamAccess().getLeftPortAssignment_0(), "rule__Stream__LeftPortAssignment_0");
					put(grammarAccess.getStreamAccess().getMessageAssignment_2(), "rule__Stream__MessageAssignment_2");
					put(grammarAccess.getStreamAccess().getRightPortAssignment_4(), "rule__Stream__RightPortAssignment_4");
					put(grammarAccess.getPortAccess().getFunctionUnitAssignment_0(), "rule__Port__FunctionUnitAssignment_0");
					put(grammarAccess.getPortAccess().getPortAssignment_1(), "rule__Port__PortAssignment_1");
					put(grammarAccess.getNamedPortAccess().getNameAssignment_1(), "rule__NamedPort__NameAssignment_1");
					put(grammarAccess.getEbcOperationAccess().getNameAssignment_1(), "rule__EbcOperation__NameAssignment_1");
					put(grammarAccess.getEbcOperationAccess().getClassAssignment_3(), "rule__EbcOperation__ClassAssignment_3");
					put(grammarAccess.getNativeClassAccess().getReferenceAssignment(), "rule__NativeClass__ReferenceAssignment");
					put(grammarAccess.getMethodOperationAccess().getNameAssignment_1(), "rule__MethodOperation__NameAssignment_1");
					put(grammarAccess.getMethodOperationAccess().getClassAssignment_3(), "rule__MethodOperation__ClassAssignment_3");
					put(grammarAccess.getMethodOperationAccess().getMethodAssignment_5(), "rule__MethodOperation__MethodAssignment_5");
					put(grammarAccess.getMethodOperationAccess().getSignatureAssignment_6(), "rule__MethodOperation__SignatureAssignment_6");
					put(grammarAccess.getSignatureAccess().getTypeAssignment_1(), "rule__Signature__TypeAssignment_1");
					put(grammarAccess.getGenericTypeAccess().getOperationTypeAssignment_0(), "rule__GenericType__OperationTypeAssignment_0");
					put(grammarAccess.getGenericTypeAccess().getOperationTypeParametersAssignment_1(), "rule__GenericType__OperationTypeParametersAssignment_1");
					put(grammarAccess.getOperationTypeAccess().getNameAssignment(), "rule__OperationType__NameAssignment");
					put(grammarAccess.getOperationTypeParametersAccess().getTypeParameterAssignment_1(), "rule__OperationTypeParameters__TypeParameterAssignment_1");
					put(grammarAccess.getOperationTypeParametersAccess().getTypeParametersAssignment_2(), "rule__OperationTypeParameters__TypeParametersAssignment_2");
					put(grammarAccess.getCSTypeParameterAccess().getTypeParameterAssignment_1(), "rule__CSTypeParameter__TypeParameterAssignment_1");
					put(grammarAccess.getTypeAccess().getReferenceAssignment(), "rule__Type__ReferenceAssignment");
					put(grammarAccess.getNativeMethodAccess().getNameAssignment(), "rule__NativeMethod__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.grammarcraft.csflow.ui.contentassist.antlr.internal.InternalFlowParser typedParser = (de.grammarcraft.csflow.ui.contentassist.antlr.internal.InternalFlowParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public FlowGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(FlowGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
